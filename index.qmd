---
title: "Farrukh Nauman" 
subtitle: "AI  & Machine Learning Consultant | Generative AI, Computer Vision & LLMs | PhD"
image: assets/officialpic.JPG
resources: 
  - assets/FarrukhNauman_consulting.pdf
toc: false
# about: 
#   template: trestles
#   image-shape: round
#   image-width: 10em
#   links:
#     - text: GitHub
#       icon: github
#       href: https://github.com/fnauman
#     - text: Twitter
#       icon: twitter
#       href: https://twitter.com/naumanf_
#     - text: LinkedIn
#       icon: linkedin
#       href: https://www.linkedin.com/in/fnauman/
#     - text: Email
#       icon: envelope
#       href: mailto:farrukhnordicworks@gmail.com
#     - text: CV
#       icon: file-earmark-pdf
#       href: assets/cv.pdf
format: 
  html: 
    page-layout: full
---

::: {.grid}

::: {.g-col-12 .g-col-md-3 .text-center}
![](assets/officialpic.JPG){.rounded-circle width=200px}

::: {.d-flex .justify-content-center .gap-3 .mt-3}
[![GitHub](https://raw.githubusercontent.com/FortAwesome/Font-Awesome/6.x/svgs/brands/github.svg){width=24px title="GitHub" .social-icon}](https://github.com/fnauman)
[![Twitter](https://raw.githubusercontent.com/FortAwesome/Font-Awesome/6.x/svgs/brands/twitter.svg){width=24px title="Twitter" .social-icon}](https://twitter.com/naumanf_)
[![LinkedIn](https://raw.githubusercontent.com/FortAwesome/Font-Awesome/6.x/svgs/brands/linkedin.svg){width=24px title="LinkedIn" .social-icon}](https://www.linkedin.com/in/fnauman/)
[![Email](https://raw.githubusercontent.com/FortAwesome/Font-Awesome/6.x/svgs/regular/envelope.svg){width=24px title="Email" .social-icon}](mailto:farrukhnordicworks@gmail.com)
[![CV](https://raw.githubusercontent.com/FortAwesome/Font-Awesome/6.x/svgs/regular/file-pdf.svg){width=24px title="Download CV" .social-icon}](assets/FarrukhNauman_consulting.pdf)
:::
:::


::: {.g-col-12 .g-col-md-9}
# Welcome! üëã

I help organizations leverage cutting-edge AI for measurable business impact. As an AI Solutions Consultant specializing in Large Language Models (LLMs), Generative AI, and Computer Vision, I deliver custom solutions that translate business needs into scalable AI architectures. My expertise includes:

- ü§ñ **LLMs & Generative AI**: Custom LLM and generative AI systems for synthetic data generation and smart assistants.
- üîç **Computer Vision**: Design and deployment of computer vision systems for automated process optimization and inspection.
- üìä **Retrieval Augmented Generation (RAG)**: Smart knowledge management and document QA using cutting-edge RAG systems.
- üíº **AI Strategy & Technical Advisory**: Strategic guidance from feasibility to deployment with a focus on ROI and implementation.

With a proven track record in developing end-to-end computer vision systems, synthetic data frameworks, and custom LLM solutions, I help businesses overcome technical challenges and achieve significant efficiency gains.

::: {.callout-note appearance="simple"}
## ü§ù Available for Consulting
::: {.d-flex .gap-2 .mt-3}
<!-- [Schedule a consultation]{.btn .btn-primary} -->
<!-- Google Calendar Appointment Scheduling begin -->
<link href="https://calendar.google.com/calendar/scheduling-button-script.css" rel="stylesheet">
<script src="https://calendar.google.com/calendar/scheduling-button-script.js" async></script>
<script>
(function() {
  var target = document.currentScript;
  window.addEventListener('load', function() {
    calendar.schedulingButton.load({
      url: 'https://calendar.google.com/calendar/appointments/schedules/AcZssZ0xjpTUuITjAslR7WIdraRXZtoKunaB6T2a4CDnuELUAxjFiVx0LMelvbUOQcORHkONM6wbW-oV?gv=true',
      color: '#039BE5',
      label: 'Book an appointment',
      target,
    });
  });
})();
</script>
<!-- end Google Calendar Appointment Scheduling -->
[Email me](mailto:farrukhnordicworks@gmail.com){.btn .btn-outline-primary}
:::
:::

## Portfolio {.mt-4}

```{python}
#| echo: false
#| output: asis
from pathlib import Path
import yaml
from datetime import datetime, date

def get_post_info(file_path):
    with open(file_path, 'r') as f:
        content = f.read().split('---')
        if len(content) > 1:
            try:
                front_matter = yaml.safe_load(content[1])
                
                # Skip draft posts
                if front_matter.get('draft', False) == True:
                    return None
                    
                date_str = front_matter.get('date', '2000-01-01')
                # Ensure date is always a datetime.date object
                if isinstance(date_str, date):
                    post_date = date_str
                else:
                    try:
                        post_date = datetime.strptime(str(date_str), '%Y-%m-%d').date()
                    except (ValueError, TypeError): # Handle invalid format or type
                        post_date = datetime.strptime('2000-01-01', '%Y-%m-%d').date()

                return {
                    'title': front_matter.get('title', 'Untitled'),
                    'date': post_date, # Store as date object
                    'path': str(file_path),
                    'description': front_matter.get('description', ''),
                    'image': front_matter.get('image', None)
                }
            except Exception as e: # Catch potential YAML errors or others
                print(f"Error processing {file_path}: {e}") # Add some logging
                return None
    return None

# Get portfolio items
portfolio_items = []
for item_dir in Path('portfolio').glob('*'):
    if item_dir.is_dir():
        index_file = item_dir / 'index.qmd'
        if index_file.exists():
            info = get_post_info(index_file)
            if info:
                # Add the directory path for image reference
                if info.get('image'):
                    info['image_path'] = str(item_dir / info['image'])
                portfolio_items.append(info)

# Sort by date and get latest 3
portfolio_items.sort(key=lambda x: x['date'], reverse=True)
portfolio_items = portfolio_items[:3]

# Print as grid
print("::: {.grid}\n")

for item in portfolio_items:
    print(f"::: {{.g-col-12 .g-col-md-4}}\n")
    print(f"### {item['title']}\n")
    
    # Get first sentence or part of description if available
    description = item['description']
    if description:
        # Limit to first 150 characters if too long
        if len(description) > 150:
            description = description[:150] + "..."
    else:
        description = "AI consulting project"
    
    # Create link to portfolio item
    print(f"[{description}]({item['path']})\n")
    print(":::\n")

# If we have fewer than 3 items, fill with placeholders
for i in range(3 - len(portfolio_items)):
    print(f"::: {{.g-col-12 .g-col-md-4}}\n")
    if i == 0:
        print("### LLM Research Assistant\n")
        print("[Developing custom LLM solutions for automated research report generation and analysis.](portfolio.qmd)\n")
    elif i == 1:
        print("### Object Detection in Farming\n")
        print("[Computer vision systems for farming applications.](portfolio.qmd)\n")
    print(":::\n")

print(":::\n")
print("\n[View full portfolio ‚Üí](portfolio.qmd)")
```

## Recent Updates

::: {.grid}

::: {.g-col-12}
### Blog üìù

```{python}
#| echo: false
#| output: asis
from pathlib import Path
import yaml
from datetime import datetime, date

# Reuse the get_post_info function defined above
# Get blog posts
blog_posts = []
for post in Path('posts').rglob('*.qmd'):
    info = get_post_info(post)
    if info:
        blog_posts.append(info)

# Get TIL posts
til_posts = []
for post in Path('randomposts').rglob('*.qmd'):
    info = get_post_info(post)
    if info:
        til_posts.append(info)

# Combine both types of posts
all_posts = blog_posts + til_posts

# Sort by date and get latest 6
all_posts.sort(key=lambda x: x['date'], reverse=True)
all_posts = all_posts[:6]

# Print as markdown
for post in all_posts:
    date_str = post['date'].strftime('%B %d, %Y') # Format date object for printing
    print(f"- [{post['title']}]({post['path']}) - {date_str}\n")

print(f"\n[View all posts ‚Üí](posts.qmd)")
```
:::

:::
